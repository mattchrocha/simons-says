{"version":3,"sources":["components/pushbutton/scripts.js","components/pushbutton/PushButton.js","components/game/GameService.js","components/game/Game.js","components/game/NewGameForm.js","components/game/NewGame.js","App.js","serviceWorker.js","index.js"],"names":["generateGradient","hexValues","a","i","x","Math","round","random","populate","PushButton","props","_this","Object","classCallCheck","this","console","log","possibleConstructorReturn","getPrototypeOf","call","submitTap","socket","emit","state","id","onFailure","screenbutton","document","getElementsByClassName","setAttribute","setTimeout","concat","bgcolor","onSuccess","onRound","room","match","params","_this2","io","on","setState","feedback","react_default","createElement","className","style","backgroundColor","onClick","React","Component","GameService","newGame","name","creator","service","post","then","response","data","axios","create","baseURL","process","withCredentials","Game","game","catch","error","requestButtons","play","_this$state","roundSequence","sequence","length","push","message","checkSequence","componentDidUpdate","buttons","position","width","Route","exact","path","component","NewGameForm","handleFormSubmit","event","preventDefault","createGame","handleChange","value","target","onSubmit","type","onChange","e","handleSubmit","render","Redirect","to","game_NewGameForm","App","Switch","NewGame","Boolean","window","location","hostname","ReactDOM","BrowserRouter","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0dcba378.chunk.js","sourcesContent":["const generateGradient = () => {\n\n  var hexValues = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"a\",\"b\",\"c\",\"d\",\"e\"];\n  \n  function populate(a) {\n    for ( var i = 0; i < 6; i++ ) {\n      var x = Math.round( Math.random() * 14 );\n      var y = hexValues[x];\n      a += y;\n    }\n    return a;\n  }\n  \n  return populate('#');\n}\n\n\nexport default generateGradient","import React from 'react';\nimport io from 'socket.io-client';\nimport './pushbutton.css';\nimport generateGradient from './scripts.js';\n\nexport default class PushButton extends React.Component{\n  constructor(props){\n    console.log(\"prueba\")\n      console.log(props)\n    super(props);\n    this.state = {\n      room: props.match.params.room,\n      id: null,\n      bgcolor: generateGradient()\n      // buttonid: props.match.params.id\n      \n    }\n  }\n\n  componentDidMount(){\n    this.socket = io('localhost:3010');\n    \n    this.socket.on('connect', () => {\n      this.socket.emit('room', this.state.room);\n      this.setState({id: this.socket.id});\n    });\n\n    this.socket.on('feedback', feedback => {\n      if (feedback === \"failure\") this.onFailure();\n      if (feedback === \"success\") this.onSuccess();\n      if (feedback === \"round\") this.onSuccess();\n    });\n  }\n\n  submitTap = () => {\n    // this.socket.emit('sequence', {id: this.state.id, timestamp:Date.now()})\n    this.socket.emit('sequence', this.state.id)\n  }\n\n  onFailure = () => {\n    let screenbutton = document.getElementsByClassName('screenbutton')[0];\n    screenbutton.setAttribute(\"style\", \"background-color: red; opacity: 1\");\n    setTimeout(() => {\n      screenbutton.setAttribute(\"style\", `transition: background-color 2s, opacity 2s; background-color: ${this.state.bgcolor}`);\n    }, 1000)\n  }\n\n  onSuccess = () => {\n    let screenbutton = document.getElementsByClassName('screenbutton')[0];\n    screenbutton.setAttribute(\"style\", `opacity: 1;  background-color: ${this.state.bgcolor}`);\n    setTimeout(() => {\n      screenbutton.setAttribute(\"style\", `transition: opacity 1s; background-color: ${this.state.bgcolor}`);\n    }, 300)\n  }\n\n  onRound = () => {\n    let screenbutton = document.getElementsByClassName('screenbutton')[0];\n    screenbutton.setAttribute(\"style\", \"background-color: green; opacity: 1\");\n    setTimeout(() => {\n      screenbutton.setAttribute(\"style\", `transition: background-color 2s, opacity 2s; background-color: ${this.state.bgcolor}`);\n    }, 1000)\n  }\n\n  render(){\n    return (\n      <div className=\"screenbutton\" style={{backgroundColor: this.state.bgcolor}} onClick={this.submitTap}>\n      </div>\n    )\n  }\n\n}","// auth/auth-service.js\nimport axios from 'axios';\n\nclass GameService {\n  constructor() {\n    this.service = axios.create({\n      baseURL: `${process.env.REACT_APP_API_URL}/game`,\n      withCredentials: true\n    });\n  }\n\n  newGame = (name, creator) => {\n    return this.service.post('/newGame', {name, creator})\n    .then(response => response.data)\n  }\n\n  // login = (username, password) => {\n  //   return this.service.post('/login', {username, password})\n  //   .then(response => response.data)\n  // }\n\n  // loggedin = () => {\n  //   return this.service.get('/currentUser',)\n  //   .then(response => response.data)\n  // }\n\n  // logout = () => {\n  //   return this.service.get('/logout',)\n  //   .then(response => response.data)\n  // }\n}\n\nexport default GameService;","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport PushButton from '../pushbutton/PushButton';\nimport GameService from './GameService';\nimport io from 'socket.io-client';\n\nclass Game extends Component {\n  constructor(props){\n    super(props);\n    this.service = new GameService();\n    this.state = {\n      room: props.match.params.room,\n      game: null,\n      buttons: null,\n      sequence: [],\n      roundSequence: [],\n      round: 0,\n      message: \"push first button of the sequence to start\"\n    }\n  }\n\n  newGame = (name) => {\n    let creator = \"5bbe158395b68f1bcbe52963\"\n    \n    this.service.newGame(name, creator)\n      .then(game => {\n        \n        this.setState({game: game.name})\n      })\n      .catch(error => console.log(error))\n  }\n\n  requestButtons = () => {\n    this.socket.emit('get buttons');\n  }\n\n  componentDidMount(){\n    this.socket = io('localhost:3010');\n\n    this.socket.on('connect', () => {\n      this.socket.emit('room', this.state.room);\n    });\n\n    this.socket.on('get buttons', (buttons) => {\n      this.setState({buttons});\n    });\n\n    this.socket.on('sequence', (id) => {\n      this.play(id)\n    });\n\n    // this.requestButtons()\n  }\n\n  play = (id) => {\n    let {roundSequence, sequence, round }= this.state;\n\n    if (roundSequence.length === sequence.length){\n      round++;\n      sequence.push(id);\n      this.socket.emit('feedback', {id, feedback: \"round\"});\n      this.setState({sequence, roundSequence: [], round, message: \"new round\"})\n    } else {\n      roundSequence.push(id);\n      if (!this.checkSequence(roundSequence, sequence)) {\n        this.socket.emit('feedback', {id, feedback: \"failure\"});\n        this.setState({message: \"you lost\", sequence: [], roundSequence: [], round: 0});\n      } else {\n        this.socket.emit('feedback', {id, feedback: \"success\"});\n        (roundSequence.length === sequence.length) ? this.setState({roundSequence, message:\"add button to the sequence\"}) : this.setState({roundSequence, message:\"keep on\"})\n      }\n    }\n  }\n\n  checkSequence = (roundSequence, sequence) => {\n    console.log(\"CHECKING IF THIS\")\n    console.log(sequence[roundSequence.length-1])\n    console.log(\"EQUALS THIS\")\n    console.log(roundSequence[roundSequence.length-1])\n    return sequence[roundSequence.length-1] === roundSequence[roundSequence.length-1] ? true : false;\n  } \n\n  componentDidUpdate = () => {\n    console.log(\"updated\")\n    // console.log(this.state.buttons)\n    // console.log(this.state.sequence)\n    console.log(`Round ${this.state.round}`)\n    console.log(`Round sequence: ${this.state.roundSequence}`)\n    console.log(`Total sequence: ${this.state.sequence}`)\n  }\n\n  render() {\n    return (\n      <div className=\"Game\">\n        <div style={{position: \"fixed\", width: \"100%\"}}>\n          <div>{this.state.round}</div>\n          <div>{this.state.message}</div>\n        </div>\n        <Route exact path=\"/game/:room\" component={PushButton}/>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React, { Component } from \"react\";\n\nclass NewGameForm extends Component {\n  constructor(){\n    super();\n    this.state = {\n      name: \"\"\n    }\n  }\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const name = this.state.name;\n    console.log(name)\n    this.props.createGame(name)\n  }\n\n  handleChange = (event) => {\n    const value = event.target.value;\n    this.setState({ name: value });\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>New game</h3>\n\n        <form onSubmit={this.handleFormSubmit}>\n          <fieldset>\n            <label>Game name:</label>\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={this.state.name}\n              onChange={e => this.handleChange(e)}\n            />\n          </fieldset>\n\n          <input type=\"submit\" value=\"Create game\" />\n        </form>\n\n        <h1>{this.state.error ? \"Error\" : \"\"}</h1>\n      </div>\n    );\n  }\n}\n\nexport default NewGameForm;\n","import React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport NewGameForm from './NewGameForm'\n\nexport default class Game extends Component {\n  constructor(){\n    super();\n    this.state = {\n      room: null\n    }\n  }\n\n  handleSubmit = name => {\n    this.setState({room: name})\n  }\n\n\n  render(){\n    return (\n      <Route exact path=\"/\" render={() => (\n        this.state.room ? (\n          <Redirect to={`/game/${this.state.room}`}/>\n        ) : (\n          <NewGameForm createGame={name => this.handleSubmit(name)}/>\n        )\n      )}/>\n    )\n  }\n\n}","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport { Switch, Route } from 'react-router-dom';\n// import {Chat} from './components/chat';\nimport PushButton from './components/pushbutton/PushButton';\nimport Game from './components/game/Game';\nimport NewGame from './components/game/NewGame';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Switch>\n          <Route exact path='/' component={NewGame}/>\n          <Route exact path='/game/:room' component={Game}/>\n          <Route exact path='/:room' component={PushButton}/>\n        </Switch> \n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n// {/* <Switch>\n//           <Route exact path='/game/:room' component={Chat}/>\n//           <Route exact path='/:room/:id' component={PushButton}/>\n//         </Switch> */}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}